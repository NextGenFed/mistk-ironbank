# coding: utf-8

"""
    Model Integration Software ToolKit - Data Transformation

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mistk.transform.client.models.mistk_dataset import MistkDataset  # noqa: F401,E501


class TransformSpecificationInitParams(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'input_datasets': 'list[MistkDataset]',
        'output_dataset': 'MistkDataset',
        'properties': 'object'
    }

    attribute_map = {
        'input_datasets': 'inputDatasets',
        'output_dataset': 'outputDataset',
        'properties': 'properties'
    }

    def __init__(self, input_datasets=None, output_dataset=None, properties=None):  # noqa: E501
        """TransformSpecificationInitParams - a model defined in Swagger"""  # noqa: E501

        self._input_datasets = None
        self._output_dataset = None
        self._properties = None
        self.discriminator = None

        self.input_datasets = input_datasets
        if output_dataset is not None:
            self.output_dataset = output_dataset
        if properties is not None:
            self.properties = properties

    @property
    def input_datasets(self):
        """Gets the input_datasets of this TransformSpecificationInitParams.  # noqa: E501

        A list of directory paths where input files can be found.  # noqa: E501

        :return: The input_datasets of this TransformSpecificationInitParams.  # noqa: E501
        :rtype: list[MistkDataset]
        """
        return self._input_datasets

    @input_datasets.setter
    def input_datasets(self, input_datasets):
        """Sets the input_datasets of this TransformSpecificationInitParams.

        A list of directory paths where input files can be found.  # noqa: E501

        :param input_datasets: The input_datasets of this TransformSpecificationInitParams.  # noqa: E501
        :type: list[MistkDataset]
        """
        if input_datasets is None:
            raise ValueError("Invalid value for `input_datasets`, must not be `None`")  # noqa: E501

        self._input_datasets = input_datasets

    @property
    def output_dataset(self):
        """Gets the output_dataset of this TransformSpecificationInitParams.  # noqa: E501

        A list of directory paths where output files will be saved  # noqa: E501

        :return: The output_dataset of this TransformSpecificationInitParams.  # noqa: E501
        :rtype: MistkDataset
        """
        return self._output_dataset

    @output_dataset.setter
    def output_dataset(self, output_dataset):
        """Sets the output_dataset of this TransformSpecificationInitParams.

        A list of directory paths where output files will be saved  # noqa: E501

        :param output_dataset: The output_dataset of this TransformSpecificationInitParams.  # noqa: E501
        :type: MistkDataset
        """

        self._output_dataset = output_dataset

    @property
    def properties(self):
        """Gets the properties of this TransformSpecificationInitParams.  # noqa: E501

        A dictionary of key value pairs for transform plugin arguments.  # noqa: E501

        :return: The properties of this TransformSpecificationInitParams.  # noqa: E501
        :rtype: object
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this TransformSpecificationInitParams.

        A dictionary of key value pairs for transform plugin arguments.  # noqa: E501

        :param properties: The properties of this TransformSpecificationInitParams.  # noqa: E501
        :type: object
        """

        self._properties = properties

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TransformSpecificationInitParams):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
